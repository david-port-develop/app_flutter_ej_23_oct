{
    "sourceFile": "services/home_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1761326301194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1761326301194,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport '../models/country_model.dart';\nimport '../models/user_model.dart';\nimport '../services/api_service.dart';\n\nclass HomeScreen extends StatefulWidget {\n  const HomeScreen({super.key});\n\n  @override\n  State<HomeScreen> createState() => _HomeScreenState();\n}\n\nclass _HomeScreenState extends State<HomeScreen> {\n  final ApiService _apiService = ApiService();\n  late Future<List<User>> _usersFuture;\n  late Future<List<Country>> _countriesFuture;\n\n  @override\n  void initState() {\n    super.initState();\n    // Iniciamos las llamadas a la API aquí.\n    _usersFuture = _apiService.fetchUsers();\n    _countriesFuture = _apiService.fetchCountries();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return DefaultTabController(\n      length: 2,\n      child: Scaffold(\n        appBar: AppBar(\n          title: const Text('Datos de APIs'),\n          backgroundColor: Colors.indigo,\n          foregroundColor: Colors.white,\n          bottom: const TabBar(\n            labelColor: Colors.white,\n            unselectedLabelColor: Colors.white70,\n            indicatorColor: Colors.amber,\n            tabs: [\n              Tab(icon: Icon(Icons.person), text: 'Usuarios'),\n              Tab(icon: Icon(Icons.flag), text: 'Países'),\n            ],\n          ),\n        ),\n        body: TabBarView(\n          children: [\n            _buildUsersList(),\n            _buildCountriesList(),\n          ],\n        ),\n      ),\n    );\n  }\n\n  Widget _buildUsersList() {\n    return FutureBuilder<List<User>>(\n      future: _usersFuture,\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return const Center(child: CircularProgressIndicator());\n        } else if (snapshot.hasError) {\n          return Center(child: Text('Error: ${snapshot.error}'));\n        } else if (!snapshot.hasData || snapshot.data!.isEmpty) {\n          return const Center(child: Text('No se encontraron usuarios.'));\n        }\n\n        final users = snapshot.data!;\n        return ListView.builder(\n          itemCount: users.length,\n          itemBuilder: (context, index) {\n            final user = users[index];\n            return ListTile(\n              leading: CircleAvatar(child: Text(user.id.toString())),\n              title: Text('${user.firstName} ${user.lastName}'),\n              subtitle: Text(user.email),\n            );\n          },\n        );\n      },\n    );\n  }\n\n  Widget _buildCountriesList() {\n    return FutureBuilder<List<Country>>(\n      future: _countriesFuture,\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return const Center(child: CircularProgressIndicator());\n        } else if (snapshot.hasError) {\n          return Center(child: Text('Error: ${snapshot.error}'));\n        } else if (!snapshot.hasData || snapshot.data!.isEmpty) {\n          return const Center(child: Text('No se encontraron países.'));\n        }\n\n        final countries = snapshot.data!;\n        return ListView.builder(\n          itemCount: countries.length,\n          itemBuilder: (context, index) {\n            final country = countries[index];\n            return ListTile(\n              leading: const Icon(Icons.public),\n              title: Text(country.name),\n              subtitle: Text('Capital: ${country.capital}'),\n            );\n          },\n        );\n      },\n    );\n  }\n}"
        }
    ]
}